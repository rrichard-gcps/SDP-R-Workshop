---
title: "GMAS Performance Dashboard"
format: dashboard
server: shiny
--- 
  
```{r}
#| context: setup

library(assertthat)
library(colorspace)
library(DT)
library(echarts4r)
library(echarts4r.assets)
library(flexdashboard)
library(fontawesome)
library(ggthemes)
library(glue)
library(htmltools)
library(htmlwidgets)
library(knitr)
library(lubridate)
library(plotly)
library(quarto)
library(readr)
library(rio)
library(scales)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(tidyverse)

load("gosa_data.RData")

# Define color scheme
color_scheme <- c('#66000040', '#022B3A40','#66666640')

# Excel-like rounding function
rnd_like_xl <- function(x, y) {
  ifelse(x >= 0, round(x + 1e-09, y), round(x - 1e-09, y))
}

# Define metro districts
metro_districts <- c(
  "Gwinnett County", "Cherokee County", "Cobb County", "DeKalb County", 
  "Douglas County", "Fayette County", "Clayton County", "Forsyth County", 
  "Fulton County", "Rockdale County", "Atlanta Public Schools", 
  "Buford City", "Decatur City", "Marietta City"
)

# Check if graph_data_sys is loaded properly
if (!exists("graph_data_sys")) {
  stop("graph_data_sys not found. Please load the correct dataset.")
}     

```

# {.sidebar}

```{r}     

grade_choices <- sort(unique(graph_data_sys$grade_input))

selectInput(
  inputId = 'grade_lev',
  label = h5('Grade Level:'),
  choices = if (length(grade_choices) > 0) grade_choices else "No Data",
  selected = if (length(grade_choices) > 0) grade_choices[[1]] else NULL
)



```     


```{r}  
#| context: server

# Create Bar Graphs

df_sys <- reactive({
  req(input$grade_lev)  # Ensure input is available
  graph_data_sys |>
    filter(grade_input == input$grade_lev)
})

output$plot_1g <- renderPlotly({
  df1 <- df_sys()
  
  # Check if df1 has data
  req(nrow(df1) > 0)
  
  # Ensure variables like plt_title and plt_subtitle exist in the dataset
  plt_title_1 <-
    unique(df1$plt_title) %>% ifelse(length(.) > 0, ., "Title not found")
  plt_subtitle_1 <-
    unique(df1$plt_subtitle) %>% ifelse(length(.) > 0, ., "Subtitle not found")
  
  plt <- df1 |>
    arrange(desc(pct_prof_dis)) |>
    filter(school_dstrct_nm %in% c(metro_districts, "State of Georgia")) |>
    ggplot(aes(
      x = reorder(school_dstrct_nm, pct_prof_dis),
      y = pct_prof_dis,
      fill = sys_group,
      color = sys_group,
      text = txt_subj
    )) +
    geom_col() +
    scale_fill_manual(
      name = "School District Location:",
      values = color_scheme,
      aesthetics = c('color', 'fill')
    ) +
    labs(
      title = plt_title_1,
      subtitle = plt_subtitle_1,
      x = " ",
      y = "% Proficient or Distinguished"
    ) +
    theme_minimal() +
    theme(legend.position = "bottom") +
    coord_flip()
  
  ggplotly(plt)
  
})
output$plot_1e <- renderEcharts4r({
  df1 <- df_sys()
  
  # Check if df1 has data
  req(nrow(df1) > 0)
  
  # Ensure variables like plt_title and plt_subtitle exist in the dataset
  plt_title_1 <-
    unique(df1$plt_title) %>% ifelse(length(.) > 0, ., "Title not found")
  plt_subtitle_1 <-
    unique(df1$plt_subtitle) %>% ifelse(length(.) > 0, ., "Subtitle not found")
  
  df1 |>
    arrange(pct_prof_dis) |>
    filter(school_dstrct_nm %in% c(metro_districts, "State of Georgia")) |>
    e_charts(school_dstrct_nm) |>
    e_bar(pct_prof_dis,bind = tooltip_lbl) |>
    e_legend(show = FALSE) |>
    e_add_nested("itemStyle", color = color) |>
    e_x_axis(
      name = "",
      nameLocation = "middle",
      nameTextStyle = list(
        color = "#333",
        fontSize = 14,
        fontStyle = 'bolder'
      )
    ) |>
    e_y_axis(
      name = "\n% Proficient or Distinguished",
      max = 100,
      nameLocation = "middle",
      nameTextStyle = list(
        color = "#333",
        fontSize = 14,
        fontStyle = 'bolder'
      )
    ) |>
    e_flip_coords() |>
    e_title(
      text = plt_title_1,
      subtext = plt_subtitle_1,
      sublink = "https://www.gcpsk12.org/Page/24850",
      textStyle = list(color = "#333", fontWeight = "bolder")
    ) |>
    e_tooltip(
      axisPointer = list(type = "shadow"),
      valueDecimals = 1,
      backgroundColor = "#FFFFFF",
      formatter = htmlwidgets::JS(
        "
    function(params) {
      var vals = params.name.split(',');
      var pointColor = params.color; // Accessing the color of the point
      var textColor;

      // Define text color based on point color brightness
      if (pointColor === '#67b7d1' || pointColor === '#CCCCCC') {
        textColor = '#FFFFFF'; // Light text for darker background
      } else {
        textColor = '#000000'; // Dark text for lighter background
      }

      // Function to format values to one decimal place
      function formatValue(value) {
        return parseFloat(value).toFixed(1);
      }

      return (
        '<div style=\"font-family: Roboto, sans-serif; padding: 5px; border: 2px solid ' + pointColor + ';\">' +
          '<div style=\"background-color:' + pointColor + '; padding: 5px;\">' +
            '<span style=\"color:' + textColor + '; font-size: 16px; font-weight: 700;\">' + vals[0] + '</span>' +'</div>' +
          '<hr style=\"border-color:' + pointColor + ';\">' +
          '<br/><b style=\"font-weight: 700; text-decoration: underline;\">School Year 2023-24 Values:</b>' +
          '<br/><span style=\"font-size: 12px; font-weight: 500;\"><b>% Proficient or Distinguished:</b> ' + formatValue(params.value[0]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 500;\"><b>% Direct Certification:</b> ' + formatValue(vals[13]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Number Tested:</b> ' + vals[1] + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Multilingual Learners:</b> ' + formatValue(vals[11]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Mobility Rate:</b> ' + formatValue(vals[15]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Special Education:</b> ' + formatValue(vals[10]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Gifted Students:</b> ' + formatValue(vals[12]) + '</span>' +
        '</div>'
      );
    }
  "
      )
    ) |>
    e_toolbox_feature("dataZoom") |>
    e_toolbox_feature(feature = "saveAsImage",
                      title = "Save as image")
})         
output$plot_2g <- renderPlotly({
  
  df1 <- df_sys()
  
  # Check if df1 has data
  req(nrow(df1) > 0)
  
  # Ensure variables like plt_title and plt_subtitle exist in the dataset
  plt_title_1 <- unique(df1$plt_title) %>% ifelse(length(.) > 0, ., "Title not found")
  plt_subtitle_1 <- unique(df1$plt_subtitle) %>% ifelse(length(.) > 0, ., "Subtitle not found")
  
  plt <- df1 |>
    ggplot(
      aes(
        x = direct_cert_perc,
        y = pct_prof_dis,
        fill = sys_group,
        color = sys_group, 
        text = txt_subj
      )
    ) +
    geom_point() +
    scale_fill_manual(
      name = "School District:",
      values = color_scheme, 
      aesthetics = c('color', 'fill')
    ) +
    labs(
      title = glue('{plt_title_1} by Direct Certification Rate'), 
      subtitle = plt_subtitle_1, 
      x = "% Direct Certification", 
      y = "% Proficient or Distinguished"
    ) + 
    theme(legend.position = "bottom")
  
  ggplotly(plt)
  
})     
output$plot_2e <- renderEcharts4r({
  
  df1 <- df_sys()
  
  # Check if df1 has data
  req(nrow(df1) > 0)
  
  # Ensure variables like plt_title and plt_subtitle exist in the dataset
  plt_title_1 <- unique(df1$plt_title) %>% ifelse(length(.) > 0, ., "Title not found")
  plt_subtitle_1 <- unique(df1$plt_subtitle) %>% ifelse(length(.) > 0, ., "Subtitle not found")
  
df1 |>
  group_by(factor(sys_group)) |>
  e_charts(direct_cert_perc) |>
  e_scatter(pct_prof_dis, bind = tooltip_lbl, symbol_size = 18) |>
  e_add_nested("itemStyle", color = color) |> 
  e_x_axis(
    name = "% Direct Certification",
    max = 100,
    interval = 10,
    nameLocation = "middle",
    nameTextStyle = list(fontSize = 14)
  ) |>
  e_y_axis(
    name = "% Proficient or Distinguished",
    max = 100,
    nameLocation = "middle",
    nameTextStyle = list(fontSize = 14)
  ) |>
  e_theme("infographic") |>
  e_legend(
    orient = 'horizontal',
    left = 0,
    bottom = 0,
          selector = list(  
        list(type = 'all', title = 'Reset')
      )
  ) |> 
  e_title(
    text =  glue('{plt_title_1} by Direct Certification Rate'),
    subtext = plt_subtitle_1,
    sublink = "https://www.gcpsk12.org/Page/24850",
    textStyle = list(color = "#333", fontWeight = "bolder")
  ) |>
  e_tooltip(
    axisPointer = list(
      type = "shadow"
    ), 
    valueDecimals = 1,
    backgroundColor = "#FFFFFF",
    formatter = htmlwidgets::JS("
    function(params) {
      var vals = params.name.split(',');
      var pointColor = params.color; // Accessing the color of the point
      var textColor;

      // Define text color based on point color brightness
      if (pointColor === '#67b7d1' || pointColor === '#CCCCCC') {
        textColor = '#FFFFFF'; // Light text for darker background
      } else {
        textColor = '#000000'; // Dark text for lighter background
      }

      // Function to format values to one decimal place
      function formatValue(value) {
        return parseFloat(value).toFixed(1);
      }

      return (
        '<div style=\"font-family: Roboto, sans-serif; padding: 5px; border: 2px solid ' + pointColor + ';\">' +
          '<div style=\"background-color:' + pointColor + '; padding: 5px;\">' +
            '<span style=\"color:' + textColor + '; font-size: 16px; font-weight: 700;\">' + vals[0] + '</span><br/>' +
          '</div>' +
          '<hr style=\"border-color:' + pointColor + ';\">' +
          '<br/><b style=\"font-weight: 700; text-decoration: underline;\">School Year 2023-24 Values:</b>' +
          '<br/><span style=\"font-size: 12px; font-weight: 500;\"><b>% Proficient or Distinguished:</b> ' + formatValue(params.value[1]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 500;\"><b>% Direct Certification:</b> ' + formatValue(params.value[0]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Number Tested:</b> ' + vals[1] + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Multilingual Learners:</b> ' + formatValue(vals[11]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Mobility Rate:</b> ' + formatValue(vals[15]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Special Education:</b> ' + formatValue(vals[10]) + '</span>' +
          '<br/><span style=\"font-size: 12px; font-weight: 400;\"><b>Gifted Students:</b> ' + formatValue(vals[12]) + '</span>' +
        '</div>'
      );
    }
  ")
  ) |>
  e_toolbox_feature("dataZoom") |>
  e_toolbox_feature(
    feature = "saveAsImage",
    title = "Save as image"
  )
   
})         


```

# District Performance 

## Row {.tabset}    

### Barplot - `ggplotly`
```{r}
plotlyOutput('plot_1g')
```

### Barplot - `echarts4r`

```{r}
echarts4rOutput('plot_1e')
```

### Scatterplot - `ggplotly`
```{r}
plotlyOutput('plot_2g')
```

### Scatterplot - `echarts4r`

```{r}
echarts4rOutput('plot_2e')
```

# School Performance     


::: {.callout-note icon=false}
## In Development

##### School-level example to be updated and posted here shortly

:::



